<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BuzHelperLedgerJournalStatic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BuzHelperLedgerJournalStatic</c> class contains frequently used static codes
/// </summary>
class BuzHelperLedgerJournalStatic
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
	public static LedgerJournalTable createJournalTable(LedgerJournalNameId _journalNameId,
        Name _journalDescription = "",
        DimensionDefault _defaultDimension = 0,
		boolean _initOtherFieldsFromLedgerJournalName = false )
    {
        BuzHelperLedgerJournalTable helperLedgerJournalTable = BuzHelperLedgerJournalTable::construct();

        helperLedgerJournalTable.parmLedgerJournalNameId(_journalNameId);
        helperLedgerJournalTable.parmJournalDescription(_journalDescription);
        helperLedgerJournalTable.parmDefaultDimension(_defaultDimension);
        helperLedgerJournalTable.parmInitOtherFieldsFromLedgerJournalName(_initOtherFieldsFromLedgerJournalName);

        helperLedgerJournalTable.createJournalTable();

        return helperLedgerJournalTable.parmLedgerJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHelperLedgerJournalTrans</Name>
				<Source><![CDATA[
    public static BuzHelperLedgerJournalTrans createHelperLedgerJournalTrans(ledgerJournalTable _ledgerJournalTable,
        DimensionDynamicAccount _ledgerDimension,
        LedgerJournalACType _accountType,
        LedgerDimensionValueSet _defaultDimension,
        AmountMST _amount,
        ExchRate _exchRate,
        currencyCode _currencyCode,
        TransDate _transDate,
        Voucher _voucher,
        LedgerJournalEngine _ledgerJournalEngine = null,
        LedgerJournalTransTxt _ledgerJournalTransTxt = "",
        DimensionDynamicAccount _offsetLedgerDimension = 0,
        LedgerJournalACType _offsetAccountType = LedgerJournalACType::Ledger,
        LedgerDimensionValueSet _offsetDefaultDimension = 0,
        boolean _generateNewVoucher = false,
        boolean _skipValidations = false)
    {
        BuzHelperLedgerJournalTrans helperLedgerJournalTrans = BuzHelperLedgerJournalTrans::construct();

        helperLedgerJournalTrans.parmLedgerJournalTable(_ledgerJournalTable);
        helperLedgerJournalTrans.parmLedgerJournalEngine(_ledgerJournalEngine);
        helperLedgerJournalTrans.parmLedgerDimension(_ledgerDimension);
        helperLedgerJournalTrans.parmAccountType(_accountType);
        helperLedgerJournalTrans.parmDefaultDimension(_defaultDimension);
        helperLedgerJournalTrans.parmAmount(_amount);
        helperLedgerJournalTrans.parmCurrencyCode(_currencyCode);
        helperLedgerJournalTrans.parmTransDate(_transDate);
        helperLedgerJournalTrans.parmVoucher(_voucher);
        helperLedgerJournalTrans.parmLedgerJournalTransTxt(_ledgerJournalTransTxt);
        helperLedgerJournalTrans.parmOffsetLedgerDimension(_offsetLedgerDimension);
        helperLedgerJournalTrans.parmOffsetAccountType(_offsetAccountType);
        helperLedgerJournalTrans.parmOffsetDefaultDimension(_offsetDefaultDimension);
        helperLedgerJournalTrans.parmGenerateNewVoucher(_generateNewVoucher);
        helperLedgerJournalTrans.parmSkipValidations(_skipValidations);
        helperLedgerJournalTrans.parmExchRate(_exchRate);

        return helperLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    public static LedgerJournalEngine createJournalTrans(ledgerJournalTable _ledgerJournalTable,
		LedgerJournalEngine _ledgerJournalEngine,
        DimensionDynamicAccount _ledgerDimension,
        LedgerJournalACType _accountType,
        LedgerDimensionValueSet _defaultDimension,
        AmountMST _amount,
		ExchRate _exchRate,
        currencyCode _currencyCode,
        TransDate _transDate,
        Voucher _voucher,
        LedgerJournalTransTxt _ledgerJournalTransTxt = "",
        DimensionDynamicAccount _offsetLedgerDimension = 0,
        LedgerJournalACType _offsetAccountType = LedgerJournalACType::Ledger,
        LedgerDimensionValueSet _offsetDefaultDimension = 0,
		boolean _generateNewVoucher = false,
		boolean _skipValidations = false,
		TaxGroup _taxGroup = "",
		TaxItemGroup _taxItemGroup = "",
        LedgerTransType _transactionType = LedgerTransType::None)
    {
        BuzHelperLedgerJournalTrans helperLedgerJournalTrans = BuzHelperLedgerJournalTrans::construct();

        helperLedgerJournalTrans.parmLedgerJournalTable(_ledgerJournalTable);
        helperLedgerJournalTrans.parmLedgerJournalEngine(_ledgerJournalEngine);
        helperLedgerJournalTrans.parmLedgerDimension(_ledgerDimension);
        helperLedgerJournalTrans.parmAccountType(_accountType);
        helperLedgerJournalTrans.parmDefaultDimension(_defaultDimension);
        helperLedgerJournalTrans.parmAmount(_amount);
        helperLedgerJournalTrans.parmCurrencyCode(_currencyCode);
        helperLedgerJournalTrans.parmTransDate(_transDate);
        helperLedgerJournalTrans.parmVoucher(_voucher);
        helperLedgerJournalTrans.parmLedgerJournalTransTxt(_ledgerJournalTransTxt);
        helperLedgerJournalTrans.parmOffsetLedgerDimension(_offsetLedgerDimension);
        helperLedgerJournalTrans.parmOffsetAccountType(_offsetAccountType);
        helperLedgerJournalTrans.parmOffsetDefaultDimension(_offsetDefaultDimension);
        helperLedgerJournalTrans.parmGenerateNewVoucher(_generateNewVoucher);
        helperLedgerJournalTrans.parmSkipValidations(_skipValidations);
        helperLedgerJournalTrans.parmExchRate(_exchRate);
        helperLedgerJournalTrans.parmTaxGroup(_taxGroup);
        helperLedgerJournalTrans.parmTaxItemGroup(_taxItemGroup);
        helperLedgerJournalTrans.parmTransactionType(_transactionType);
        helperLedgerJournalTrans.parmGenerateNewVoucher(_generateNewVoucher);

        helperLedgerJournalTrans.createJournalTrans();
        return helperLedgerJournalTrans.parmLedgerJournalEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewVoucher</Name>
				<Source><![CDATA[
	public static Voucher getNewVoucher(LedgerJournalNameId _ledgerJournalNameId)
    {
        NumberSeq numberSeq;

        if( !_ledgerJournalNameId )
            return "";

        numberSeq = NumberSeq::newGetVoucherFromId(LedgerJournalName::find(_ledgerJournalNameId).NumberSequenceTable);
        return numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerJournal</Name>
				<Source><![CDATA[
    public static void postLedgerJournal(LedgerJournalTable _ledgerJournalTable, 
        NoYes _post = NoYes::Yes, NoYes _transferErrors = NoYes::No)
    {
        LedgerJournalCheckPost ledgerJournalCheckPost;

        ledgerJournalCheckPost = Â LedgerJournalCheckPost::newLedgerJournalTable(_ledgerJournalTable, _post, _transferErrors);
        ledgerJournalCheckPost.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTrans_Project</Name>
				<Source><![CDATA[
    public static LedgerJournalTrans_Project createLedgerJournalTrans_Project(RefRecId _ledgerJournalTransRecId, 
		ProjCategoryCostId _categoryId, 
		ProjActivityNumber _activityNumber, 
		ProjId _projId,
		LedgerJournalTrans _ledgerJournalTrans = null)
    {
        LedgerJournalTrans_Project ledgerProjects;

        if(!LedgerJournalTrans_Project::checkExist(_ledgerJournalTransRecId))
        {
            if( _ledgerJournalTrans == null )
                _ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTransRecId, false);

            ledgerProjects.clear();
            ledgerProjects.RefRecId				= _ledgerJournalTransRecId;
            ledgerProjects.initValue();
            ledgerProjects.ProjId				= _projId;
            ledgerProjects.CategoryId			= _categoryId;
            ProjCategory ProjCategory			= ProjCategory::find(_categoryId);
            ledgerProjects.TaxItemGroupSales    = ProjCategory.TaxItemGroupId;
            ledgerProjects.LinePropertyId       = ProjLinePropertySetup::findLinePropertyId(_projId, _categoryId);
            ledgerProjects.ActivityNumber		= _activityNumber;
            ledgerProjects.CostPrice            = _ledgerJournalTrans.AmountCurDebit ? _ledgerJournalTrans.AmountCurDebit : _ledgerJournalTrans.AmountCurCredit * -1 ;
            ledgerProjects.SalesCurrencyId      = _ledgerJournalTrans.CurrencyCode;
            ledgerProjects.ProjTransDate        = _ledgerJournalTrans.TransDate;
            ledgerProjects.Qty                  = 1;
            ledgerProjects.insert();
        }
        else
        {
            select forUpdate ledgerProjects where ledgerProjects.RefRecId == _ledgerJournalTransRecId;
        
            if(ledgerProjects)
            {
                ledgerProjects.CategoryId		= _categoryId;
                ledgerProjects.ActivityNumber	= _activityNumber;
                ledgerProjects.update();
            }
        }

        return ledgerProjects;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTransSampleUsage</Name>
				<Source><![CDATA[
    public static void createJournalTransSampleUsage()
    {
        LedgerJournalEngine	ledgerJournalEngine;
        LedgerJournalTable	ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;
        voucher             voucher;
        BuzHelperLedgerJournalTrans helperLedgerJournalTrans;

        while(false)
        {
            /*helperLedgerJournalTrans = BuzHelperLedgerJournalStatic::createHelperLedgerJournalTrans(ledgerJournalTable,
            LedgerDimension, LedgerJournalACType::Ledger, DefaultDimension, GeneralJournalAccountEntry.AccountingCurrencyAmount*-1, 100,
            Ledger::accountingCurrency(), EndDate, voucher, ledgerJournalEngine, BuzYearClosingSteps.Text, OffsetLedgerDimension, LedgerJournalACType::Ledger, OffsetDefaultDimension);

			// Parametre olarak istenmemiÅ ama doldurmak istediÄimiz alan olursa aÅaÄÄ±daki gibi doldurabiliriz
			// LedgerJournalTrans tablosundaki istediÄimiz alanÄ± doldurabiliriz
            helperLedgerJournalTrans.parmLedgerJournalTrans().Due = 01\01\2021;

            //GÃ¼nlÃ¼k satÄ±rÄ±nÄ± oluÅturuyoruz.
			helperLedgerJournalTrans.createJournalTrans();


            ledgerJournalEngine = helperLedgerJournalTrans.parmLedgerJournalEngine();
            ledgerJournalTrans = helperLedgerJournalTrans.parmLedgerJournalTrans();
            voucher = ledgerJournalTrans.Voucher;*/
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>